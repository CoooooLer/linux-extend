linux的权限操作与用户、用户组是兄弟操作。
	总述：linux系统一般将文件可存/取访问的身份分为3个类别：owner、group、ohters，3种身份各有read、write、execute等权限。

	权限介绍：
	在linux中分别有读、写、执行权限：
		读权限：
			对于文件夹来说，读权限影响用户是否能够列出目录结构
			对于文件来说，读权限影响用户是否可以查看文件内容

		写权限：
			对文件夹来说，写权限影响用户是否可以在文件夹下“创建/删除/复制到/移动到”文档
			对于文件来说，写权限影响用户是否可以编辑文件内容

		执行权限：
			一般都是对于文件来说，特别是脚本文件。


	身份介绍：
		owner身份（文件所有者，默认为文档的创建者）
		group身份（与文件所有者同组的用户）
		others身份（其他人）
		root用户（超级用户）


	查看权限:
		#ls -l   等价于： #ll
		drwxr-x---
		十位字符表示含义：
			第1位：表示文档类型，取值常见的有“d表示文件夹”、“-表示文件”、“|表示软连接”、“s表示套接字”等等

			第2-4位：表示文档所有者的权限情况，第2位表示读权限的情况，取值有r、-；第3位表示写权限的情况，w表示可写，-表示不可写；第4位表示执行权限的情况，取值有x/-

			第5-7位：表示与所有者同在一个组的用户权限情况，第5位表示读权限的情况，取值有r、-；第6位表示写权限的情况，w表示可写，-表示不可写；第7位表示执行权限的情况，取值有x/-

			第8-10位：表示除了上面前2部分的用户之外的其他用户的权限情况，第8位表示读权限的情况，取值有r、-；第9位表示写权限的情况，w表示可写，-表示不可写；第10位表示执行权限的情况，取值有x/-


		权限分配中，均是rwx的三个参数组合，且位置顺序不会变化，没有对应权限就用 - 代替。


权限设置
	语法： #chmod 选项 权限模式 文档
	注意：
		常用选项：
			-R: 递归设置权限（当文档类型为文件夹的时候）
			权限模式： 就是该文档需要设置的权限信息
			文档： 可以是文件，也可以是文件夹，可以是相对路径，也可以是绝对路径。

		注意点：如果想给文档设置权限，操作者要么是root用户，要么就是文档的所有者。

*		字母形式
			给谁设置：
				u: 表示所有者身份owner（user）
				g: 表示给所有者同组用户设置（group）
				o: 表示others，给其他用户设置权限
				a: 表示all，给所有人（包含ugo部分）设置权限
					如果在设置权限的时候不指定给谁设置，则默认给所有用户设置

			权限分配方式：
				+: 表示给具体的用户新增权限（相对当前）
				-: 表示删除用户的权限（相对当前）
				=： 表示将权限设置成具体的值（注重结果）

			权限字符：
				r: 读
				w: 写
				x: 执行
				-: 表示没有权限

			


			例如1：需要给anaconda-ks.cfg文件（-rw-------）设置权限，要求所有者拥有全部权限，同组用户拥有读和执行权限，其他用户只读权限。
				1、 #chmod  u+x,g+rx,o+r anaconda-ks.cfg
					#ll anaconda-ks.cfg

				2、 #chmod u-x,g-rx,o-r anaconda-ks.cfg
				   #chmod u=rwx,g=rx,o=r anaconda-ks.cfg
				   #ll anaconda-ks.cfg

		   	例如2：如果anaconda-ks.cfg文件什么权限都没有，可以使用root用户设置所有人都有执行权限，则可以写成：
		   		1、 #chmod a=--- anaconda-ks.cfg   （清空权限）
		   			#chmod a=x anaconda-ks.cfg

	   			2、 #chmod a+x anaconda-ks.cfg

	   			3、 #chmod +x anaconda-ks.cfg

	   		注意：当文档拥有执行权限，则其颜色在终端中就是绿色。


*   	数字形式
			读: r 	4
			写: w 	2
			执行: x 	1
			没有任何权限: 0
			所有权限： 777

			例如：需要给anaconda-ks.cfg设置权限，权限要求所有者拥有全部权限，同组用户拥有读执行权限，其他用户只读。
				#ll anaconda-ks.cfg
				#chmod 754 anaconda-ks.cfg，请问这个命令有什么不合理的地方？
					同组用户： 3=2+1 = 写+执行


			面试题：用超级管理员设置文档的权限命令是#chmod -R 731 anaconda-ks.cfg，请问这个命令有什么不合理的地方？
				同组用户： 3=2+1 = 写+执行  （不能读，就不能写）

				可以通过#echo  XXXXXX >> anaconda-ks.cfg  往里面写东西

			注意：如果一个权限数字中但凡出现2与3的数字，则该权限有不合理的情况。



	注意事项
		使用root用户创建一个文件夹(/oo)，权限默认
			#mkdir /oo
		在oo目录下创建文件（oo/xx.txt）,给权限777
			#touch /oo/xx.txt
			#chmod 777 /oo/xx.txt
			#ll /oo/xx.txt
		切换到另一个用户（不是文档所有者，也不是同组用户，属于other部分）

		问题1：这个用户是否可以打开oo/xx.txt文件     【可以】
		问题2： 这个用户是否可以编辑oo/xx.txt文件		【可以】
		问题3： 这个用户是否可以删除oo/xx.txt文件		【不可以，同样不允许创建文件/文件夹、移动文件、重命名文件；因为相对于oo文件夹只有读和执行的权限，没有写权限】

		在linux中，如果要删除一个文件，不是看文件有没有相应的权限，而是看文件所在目录是否有写权限，如果有才可以删除。

属主与属组设置
	属主： 所属的用户（文件的主人）
	属组： 所属的用户组
	这两项信息是在文档创建的时候会使用创建者的信息（用户名、用户所属的主组）。
	如果有时候去删除某个用户，则该用户对应的文档的属主和属组信息就需要去修改。

*	chown
		作用： 更改文档的所属用户
		语法： #chown -R username 文档路径

		案例： 将刚才root用户创建的oo目录所有者更改为linux001
			#chown linux001 /oo
			#ll

	chgrp
		作用： 更改文档的所属用户组
		语法： #chgrp -R groupname 文档的路径

		案例： 将刚才root用户创建的oo目录，所有者更改为linux001，并且将所属用户组也改为linux001
			#chgrp linux001 /oo
			#ll

	通过一个命令实现既可以更改所属用户，也可以修改所属的用户组。
		语法： #chown -R username:groupname 文档路径

	案例： 使用chown指令，将oo目录的所属用户和用户组更改为root，包括子目录子文件。
		#chown -R root:root /oo
		#ll


扩展
	reboot、shutdown、init、halt、user管理，在普通用户身份上都是操作不了的，但是有些特殊的情况下又需要执行权限。
	可以使用sudo（switch user do）命令来进行权限设置。sudo可以让管理员（root）事先定义某些特殊命令谁可以执行。

	默认sudo中是没有除root之外用户的规则，要想使用则先配置sudo。
	sudo配置文件： /etc/sudoers
		配置sudo文件使用命令"visudo",打开之后其使用方法和vim一致。

		配置普通用户的权限
			root 表示用户名
			All： 表示允许登录的主机（地址白名单）
			（All）: 表示以谁的身份执行，All表示root身份
			All: 表示当前用户可以执行的命令，多个命令可以使用"，"分割

		案例：linux001用户不能添加用户，要求使用sudo配置，将其设置为可以添加用户，并且可以修改密码（但是不能修改root用户密码）
		注意：在写sudo规则的时候不建议写直接形式的命令，而是写命令的完整路径。路径可以使用which命令来查看
			语法：#which 指令名称
			#visudo
			/root （找到：root  ALL=（ALL）  ALL   在这一行下面书写语句)
			用：！which useradd  和 ！which passwd找到添加用户和修改密码的路径，写成如下格式：
				linux001 ALL=(ALL)    /usr/sbin/useradd,/usr/bin/passwd

		在添加好对应的规则之后就可以切换用户，切换到linux001用户，再去执行
			#su linux001
		使用刚才定义的规则：
			#sudo 需要执行的指令

			#sudo useradd aop
			#tail -1 /etc/passwd
		注意：在输入sudo指令之后需要输入当前的用户密码进行确认操作（不是root用户密码），输入之后在接下来五分钟之内不需要输入密码。

		特别注意：
			不能让linux001修改root用户密码，visudo规则调整为：
				linux001 ALL=(ALL)   /usr/sbin/useradd,/usr/bin/passwd[a-zA-Z]*,!/usr/bin/passwd root
			禁止修改root密码的配置：
				/usr/bin/passwd[a-zA-Z]*,!/usr/bin/passwd root

		在普通用户下怎么查看自己具有哪些特殊的权限呢：
			#sudo -l

		注意：sudo不是任何linux分支都有的命令，常见centos与ubuntu都存在sudo命令。