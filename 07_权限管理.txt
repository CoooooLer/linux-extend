linux的权限操作与用户、用户组是兄弟操作。
	总述：linux系统一般将文件可存/取访问的身份分为3个类别：owner、group、ohters，3种身份各有read、write、execute等权限。

	权限介绍：
	在linux中分别有读、写、执行权限：
		读权限：
			对于文件夹来说，读权限影响用户是否能够列出目录结构
			对于文件来说，读权限影响用户是否可以查看文件内容

		写权限：
			对文件夹来说，写权限影响用户是否可以在文件夹下“创建/删除/复制到/移动到”文档
			对于文件来说，写权限影响用户是否可以编辑文件内容

		执行权限：
			一般都是对于文件来说，特别是脚本文件。


	身份介绍：
		owner身份（文件所有者，默认为文档的创建者）
		group身份（与文件所有者同组的用户）
		others身份（其他人）
		root用户（超级用户）


	查看权限:
		#ls -l   等价于： #ll
		drwxr-x---
		十位字符表示含义：
			第1位：表示文档类型，取值常见的有“d表示文件夹”、“-表示文件”、“|表示软连接”、“s表示套接字”等等

			第2-4位：表示文档所有者的权限情况，第2位表示读权限的情况，取值有r、-；第3位表示写权限的情况，w表示可写，-表示不可写；第4位表示执行权限的情况，取值有x/-

			第5-7位：表示与所有者同在一个组的用户权限情况，第5位表示读权限的情况，取值有r、-；第6位表示写权限的情况，w表示可写，-表示不可写；第7位表示执行权限的情况，取值有x/-

			第8-10位：表示除了上面前2部分的用户之外的其他用户的权限情况，第8位表示读权限的情况，取值有r、-；第9位表示写权限的情况，w表示可写，-表示不可写；第10位表示执行权限的情况，取值有x/-


		权限分配中，均是rwx的三个参数组合，且位置顺序不会变化，没有对应权限就用 - 代替。


权限设置
	语法： #chmod 选项 权限模式 文档
	注意：
		常用选项：
			-R: 递归设置权限（当文档类型为文件夹的时候）
			权限模式： 就是该文档需要设置的权限信息
			文档： 可以是文件，也可以是文件夹，可以是相对路径，也可以是绝对路径。

		注意点：如果想给文档设置权限，操作者要么是root用户，要么就是文档的所有者。

*		字母形式
			给谁设置：
				u: 表示所有者身份owner（user）
				g: 表示给所有者同组用户设置（group）
				o: 表示others，给其他用户设置权限
				a: 表示all，给所有人（包含ugo部分）设置权限
					如果在设置权限的时候不指定给谁设置，则默认给所有用户设置

			权限分配方式：
				+: 表示给具体的用户新增权限（相对当前）
				-: 表示删除用户的权限（相对当前）
				=： 表示将权限设置成具体的值（注重结果）

			权限字符：
				r: 读
				w: 写
				x: 执行
				-: 表示没有权限

			


			例如1：需要给anaconda-ks.cfg文件（-rw-------）设置权限，要求所有者拥有全部权限，同组用户拥有读和执行权限，其他用户只读权限。
				1、 #chmod  u+x,g+rx,o+r anaconda-ks.cfg
					#ll anaconda-ks.cfg

				2、 #chmod u-x,g-rx,o-r anaconda-ks.cfg
				   #chmod u=rwx,g=rx,o=r anaconda-ks.cfg
				   #ll anaconda-ks.cfg

		   	例如2：如果anaconda-ks.cfg文件什么权限都没有，可以使用root用户设置所有人都有执行权限，则可以写成：
		   		1、 #chmod a=--- anaconda-ks.cfg   （清空权限）
		   			#chmod a=x anaconda-ks.cfg

	   			2、 #chmod a+x anaconda-ks.cfg

	   			3、 #chmod +x anaconda-ks.cfg

	   		注意：当文档拥有执行权限，则其颜色在终端中就是绿色。


*   	数字形式
			读: r 	4
			写: w 	2
			执行: x 	1
			没有任何权限: 0
			所有权限： 777

			例如：需要给anaconda-ks.cfg设置权限，权限要求所有者拥有全部权限，同组用户拥有读执行权限，其他用户只读。
				#ll anaconda-ks.cfg
				#chmod 754 anaconda-ks.cfg